'use client';

import React, { useState } from 'react';
import { Document, Packer, Paragraph, TextRun } from 'docx';

interface MessageBubbleProps {
  message: string;
  isUser: boolean;
  timestamp: Date;
}

// Browser detection utility
const getBrowserInfo = () => {
  const userAgent = navigator.userAgent.toLowerCase();
  const isFirefox = userAgent.includes('firefox');
  const isChrome = userAgent.includes('chrome') && !userAgent.includes('edg');
  const isEdge = userAgent.includes('edg');
  const isSafari = userAgent.includes('safari') && !userAgent.includes('chrome');
  const isIE = userAgent.includes('msie') || userAgent.includes('trident');
  
  // Check for download support
  const supportsDownload = 'download' in document.createElement('a');
  const supportsBlob = typeof Blob !== 'undefined';
  const supportsURL = typeof URL !== 'undefined' && URL.createObjectURL;
  
  return {
    isFirefox,
    isChrome,
    isEdge,
    isSafari,
    isIE,
    supportsDownload,
    supportsBlob,
    supportsURL,
    name: isFirefox ? 'Firefox' : isChrome ? 'Chrome' : isEdge ? 'Edge' : isSafari ? 'Safari' : isIE ? 'IE' : 'Unknown',
    version: userAgent.match(/(firefox|chrome|edg|safari|msie|trident)[\/\s](\d+)/i)?.[2] || 'Unknown'
  };
};

const downloadDocument = async (content: string, filename: string, format: 'txt' | 'docx' | 'csv') => {
  try {
    // Clean up the content for better formatting
    let cleanContent = content;
    
    // Add proper document header
    const header = `DORF NELSON & ZAUDERER
Legal Document
Generated: ${new Date().toLocaleDateString()}
===============================================

`;
    
    // Add disclaimer footer
    const footer = `

===============================================
DISCLAIMER: This is a template document generated by the Dorf Nelson & Zauderer Assistant. 
This document is for informational purposes only and does not constitute legal advice. 
Please consult with a qualified attorney before using this document.

© ${new Date().getFullYear()} Dorf Nelson & Zauderer`;

    cleanContent = header + cleanContent + footer;
    
    let blob: Blob;
    
    switch (format) {
      case 'csv':
        // Convert to CSV format (simple conversion)
        const csvContent = cleanContent.split('\n').map(line => `"${line.replace(/"/g, '""')}"`).join('\n');
        blob = new Blob([csvContent], { type: 'text/csv' });
        break;
      case 'docx':
        try {
          // Create a proper Word document using docx library
          const doc = new Document({
            sections: [{
              properties: {},
              children: [
                new Paragraph({
                  children: [
                    new TextRun({
                      text: "DORF NELSON & ZAUDERER",
                      bold: true,
                      size: 32,
                    }),
                  ],
                  alignment: 'center',
                }),
                new Paragraph({
                  children: [
                    new TextRun({
                      text: "Legal Document",
                      bold: true,
                      size: 24,
                    }),
                  ],
                  alignment: 'center',
                }),
                new Paragraph({
                  children: [
                    new TextRun({
                      text: `Generated: ${new Date().toLocaleDateString()}`,
                      size: 20,
                    }),
                  ],
                  alignment: 'center',
                }),
                new Paragraph({ text: "" }), // Empty line
                ...content.split('\n').map(line => 
                  new Paragraph({
                    children: [
                      new TextRun({
                        text: line,
                        size: 22,
                      }),
                    ],
                  })
                ),
                new Paragraph({ text: "" }), // Empty line
                new Paragraph({
                  children: [
                    new TextRun({
                      text: "DISCLAIMER: This is a template document generated by the Dorf Nelson & Zauderer Assistant. This document is for informational purposes only and does not constitute legal advice. Please consult with a qualified attorney before using this document.",
                      italics: true,
                      size: 18,
                    }),
                  ],
                }),
                new Paragraph({
                  children: [
                    new TextRun({
                      text: `© ${new Date().getFullYear()} Dorf Nelson & Zauderer`,
                      italics: true,
                      size: 18,
                    }),
                  ],
                  alignment: 'center',
                }),
              ],
            }],
          });

          const buffer = await Packer.toBuffer(doc);
          blob = new Blob([new Uint8Array(buffer)], { 
            type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' 
          });
        } catch (error) {
          console.error('Error creating Word document:', error);
          // Fallback to text format
          blob = new Blob([cleanContent], { type: 'text/plain' });
        }
        break;
      default: // txt
        blob = new Blob([cleanContent], { type: 'text/plain' });
    }
    
    // Enhanced download with browser compatibility
    const browser = getBrowserInfo();
    
    // Check if browser supports required features
    if (!browser.supportsBlob || !browser.supportsURL) {
      throw new Error(`Your browser (${browser.name} ${browser.version}) doesn't support file downloads. Please use a modern browser like Chrome, Firefox, or Edge.`);
    }
    
    const url = URL.createObjectURL(blob);
    
    try {
      // Method 1: Modern browsers with download attribute
      if (browser.supportsDownload) {
        const a = document.createElement('a');
        a.href = url;
        a.download = filename;
        a.style.display = 'none';
        
        // Add to DOM temporarily
        document.body.appendChild(a);
        
        // Trigger download
        a.click();
        
        // Clean up
        setTimeout(() => {
          document.body.removeChild(a);
          URL.revokeObjectURL(url);
        }, 100);
        
        // Success feedback
        console.log(`Download initiated: ${filename} (${browser.name} ${browser.version})`);
        return;
      }
      
      // Method 2: Fallback for browsers that don't support download attribute
      if (browser.isFirefox || browser.isSafari) {
        // For Firefox and Safari, try opening in new window
        const newWindow = window.open(url, '_blank');
        if (!newWindow) {
          // If popup blocked, show user instructions
          throw new Error(`Please right-click the download button and select "Save link as..." to download the file:\n\n${filename}\n\nOr check your browser's popup blocker settings.`);
        }
        // Clean up after a delay
        setTimeout(() => URL.revokeObjectURL(url), 5000);
        return;
      }
      
      if (browser.isIE) {
        // For Internet Explorer, use different approach
        const iframe = document.createElement('iframe');
        iframe.style.display = 'none';
        iframe.src = url;
        document.body.appendChild(iframe);
        setTimeout(() => {
          document.body.removeChild(iframe);
          URL.revokeObjectURL(url);
        }, 1000);
        return;
      }
      
      // Final fallback - show instructions
      throw new Error(`Download not supported. Please try:\n1. Right-click the download button and select "Save link as..."\n2. Check your browser's download settings\n3. Try a different browser (Chrome, Edge, or Firefox)\n\nBrowser: ${browser.name} ${browser.version}`);
      
    } catch (downloadError) {
      console.error('Download failed:', downloadError);
      throw downloadError;
    }
    
  } catch (error) {
    console.error('Document generation failed:', error);
    alert(`Failed to generate document. Error: ${error.message}\n\nPlease try again or contact support if the issue persists.`);
  }
};

export default function MessageBubble({ message, isUser, timestamp }: MessageBubbleProps) {
  const [copied, setCopied] = useState(false);
  const [downloadStatus, setDownloadStatus] = useState<{[key: string]: 'idle' | 'downloading' | 'success' | 'error'}>({});

  const formatTime = (date: Date) => {
    return date.toLocaleTimeString('en-US', { 
      hour: 'numeric', 
      minute: '2-digit',
      hour12: true 
    });
  };

  const handleCopyText = async () => {
    try {
      await navigator.clipboard.writeText(message);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000); // Reset after 2 seconds
    } catch (error) {
      console.error('Failed to copy text:', error);
      // Fallback for older browsers
      const textArea = document.createElement('textarea');
      textArea.value = message;
      document.body.appendChild(textArea);
      textArea.select();
      document.execCommand('copy');
      document.body.removeChild(textArea);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    }
  };

  // Check if message contains document content that can be downloaded
  const isDocument = message.length > 500 && (
    message.includes('CONTRACT') || 
    message.includes('AGREEMENT') || 
    message.includes('TEMPLATE') || 
    message.includes('DOCUMENT') ||
    message.includes('WHEREAS') ||
    message.includes('THEREFORE') ||
    message.includes('PARTY') ||
    message.includes('[') || // Placeholder fields
    message.includes('LEGAL') ||
    message.includes('TERMS') ||
    message.includes('CONDITIONS') ||
    message.includes('CLAUSE') ||
    message.includes('SECTION') ||
    message.includes('ARTICLE')
  );

  const handleDownload = async (format: 'txt' | 'docx' | 'csv') => {
    const downloadKey = format;
    setDownloadStatus(prev => ({ ...prev, [downloadKey]: 'downloading' }));
    
    try {
      // Generate a descriptive filename based on content
      let docType = 'ai_response';
      
      // Check for legal document types
      if (message.includes('CONTRACT')) docType = 'contract';
      else if (message.includes('AGREEMENT')) docType = 'agreement';
      else if (message.includes('TEMPLATE')) docType = 'template';
      else if (message.includes('NDA') || message.includes('NON-DISCLOSURE')) docType = 'nda';
      else if (message.includes('EMPLOYMENT')) docType = 'employment_agreement';
      else if (message.includes('LEASE')) docType = 'lease_agreement';
      else if (message.includes('SERVICE')) docType = 'service_agreement';
      else if (message.includes('TERMS')) docType = 'terms_conditions';
      else if (message.includes('LEGAL')) docType = 'legal_analysis';
      else if (message.includes('RESEARCH')) docType = 'legal_research';
      else if (message.includes('MEMO')) docType = 'legal_memo';
      else if (message.includes('BRIEF')) docType = 'legal_brief';
      else if (message.includes('LETTER')) docType = 'legal_letter';
      else if (message.includes('OPINION')) docType = 'legal_opinion';
      else if (message.includes('ADVICE')) docType = 'legal_advice';
      else if (message.includes('GUIDANCE')) docType = 'legal_guidance';
      else if (message.includes('ANALYSIS')) docType = 'legal_analysis';
      else if (message.includes('REVIEW')) docType = 'legal_review';
      else if (message.includes('SUMMARY')) docType = 'legal_summary';
      else if (message.includes('REPORT')) docType = 'legal_report';
      
      const timestamp = new Date().toISOString().slice(0, 10); // YYYY-MM-DD
      const filename = `${docType}_${timestamp}.${format}`;
      
      await downloadDocument(message, filename, format);
      
      // Mark as success
      setDownloadStatus(prev => ({ ...prev, [downloadKey]: 'success' }));
      
      // Reset status after 3 seconds
      setTimeout(() => {
        setDownloadStatus(prev => ({ ...prev, [downloadKey]: 'idle' }));
      }, 3000);
      
    } catch (error) {
      console.error('Download error:', error);
      setDownloadStatus(prev => ({ ...prev, [downloadKey]: 'error' }));
      
      // Reset status after 5 seconds
      setTimeout(() => {
        setDownloadStatus(prev => ({ ...prev, [downloadKey]: 'idle' }));
      }, 5000);
    }
  };

  return (
    <div className={`py-8 ${isUser ? 'bg-gradient-to-r from-gray-50 to-blue-50/30' : 'bg-white'} border-b border-gray-100/50`}>
      <div className="max-w-4xl mx-auto px-4">
        <div className="flex items-start space-x-4">
          {/* Enhanced Avatar */}
          <div className={`w-10 h-10 rounded-full flex items-center justify-center flex-shrink-0 shadow-sm border-2 ${
            isUser 
              ? 'bg-gradient-to-br from-law-blue to-law-blue-dark text-white border-law-blue/20' 
              : 'bg-gradient-to-br from-gray-100 to-gray-200 text-gray-600 border-gray-200'
          }`}>
            {isUser ? (
              <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                <path fillRule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clipRule="evenodd" />
              </svg>
            ) : (
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253" />
              </svg>
            )}
          </div>
          
          {/* Message content - ChatGPT Style */}
          <div className="flex-1 min-w-0 relative group">
            {/* Copy button for AI messages */}
            {!isUser && (
              <button
                onClick={handleCopyText}
                className="absolute top-0 right-0 p-2 opacity-0 group-hover:opacity-100 transition-opacity duration-200 hover:bg-gray-100 rounded-lg"
                title="Copy message"
              >
                {copied ? (
                  <svg className="w-4 h-4 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                  </svg>
                ) : (
                  <svg className="w-4 h-4 text-gray-500 hover:text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                  </svg>
                )}
              </button>
            )}
            
            <div className="prose prose-sm max-w-none">
              <p className="text-gray-900 leading-relaxed whitespace-pre-wrap m-0">{message}</p>
            </div>
            
            {/* File attachment indicator */}
            {isUser && message.includes('📎 Uploaded files:') && (
              <div className="mt-3 p-3 bg-blue-50 border border-blue-200 rounded-lg">
                <div className="flex items-center space-x-2">
                  <svg className="w-4 h-4 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15.172 7l-6.586 6.586a2 2 0 102.828 2.828l6.414-6.586a4 4 0 00-5.656-5.656l-6.415 6.585a6 6 0 108.486 8.486L20.5 13" />
                  </svg>
                  <span className="text-sm text-blue-800 font-medium">Files uploaded and analyzed</span>
                </div>
              </div>
            )}
            
            {/* Professional Download buttons - Always show for AI responses */}
            {!isUser && (
              <div className="mt-6 p-4 bg-gradient-to-r from-gray-50 to-blue-50/50 rounded-xl border border-gray-200">
                <div className="flex items-center justify-between mb-3">
                  <div className="flex items-center">
                    <svg className="w-4 h-4 text-law-blue mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                    </svg>
                    <span className="text-sm font-semibold text-gray-800">Download Document</span>
                  </div>
                  <div className="text-xs text-gray-500">
                    Browser: {getBrowserInfo().name} {getBrowserInfo().version}
                  </div>
                </div>
                <div className="flex flex-wrap gap-3">
                  <button
                    onClick={() => handleDownload('docx')}
                    disabled={downloadStatus.docx === 'downloading'}
                    className={`flex items-center space-x-3 px-5 py-3 rounded-lg transition-all duration-200 text-sm border shadow-sm hover:shadow-md group ${
                      downloadStatus.docx === 'downloading' 
                        ? 'bg-gray-100 border-gray-300 cursor-not-allowed' 
                        : downloadStatus.docx === 'success'
                        ? 'bg-green-50 border-green-300'
                        : downloadStatus.docx === 'error'
                        ? 'bg-red-50 border-red-300'
                        : 'bg-blue-50 hover:bg-blue-100 border-blue-200 hover:border-blue-300'
                    }`}
                  >
                    {/* Microsoft Word Logo */}
                    <div className={`w-6 h-6 rounded flex items-center justify-center ${
                      downloadStatus.docx === 'downloading' ? 'bg-gray-400' :
                      downloadStatus.docx === 'success' ? 'bg-green-600' :
                      downloadStatus.docx === 'error' ? 'bg-red-600' :
                      'bg-blue-600'
                    }`}>
                      {downloadStatus.docx === 'downloading' ? (
                        <svg className="w-4 h-4 text-white animate-spin" fill="none" viewBox="0 0 24 24">
                          <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                          <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                      ) : downloadStatus.docx === 'success' ? (
                        <svg className="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                        </svg>
                      ) : downloadStatus.docx === 'error' ? (
                        <svg className="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                        </svg>
                      ) : (
                        <svg className="w-4 h-4 text-white" viewBox="0 0 24 24" fill="currentColor">
                          <path d="M12.5 2L3 4.5v15L12.5 22l9.5-2.5v-15L12.5 2zM8.5 7.5h2v9h-2v-9zm4 0h2v9h-2v-9z"/>
                        </svg>
                      )}
                    </div>
                    <span className={`font-semibold ${
                      downloadStatus.docx === 'downloading' ? 'text-gray-500' :
                      downloadStatus.docx === 'success' ? 'text-green-700' :
                      downloadStatus.docx === 'error' ? 'text-red-700' :
                      'text-blue-700 group-hover:text-blue-800'
                    }`}>
                      {downloadStatus.docx === 'downloading' ? 'Generating...' :
                       downloadStatus.docx === 'success' ? 'Downloaded!' :
                       downloadStatus.docx === 'error' ? 'Failed - Try Again' :
                       'Download as Word'}
                    </span>
                  </button>
                  <button
                    onClick={() => handleDownload('csv')}
                    disabled={downloadStatus.csv === 'downloading'}
                    className={`flex items-center space-x-3 px-5 py-3 rounded-lg transition-all duration-200 text-sm border shadow-sm hover:shadow-md group ${
                      downloadStatus.csv === 'downloading' 
                        ? 'bg-gray-100 border-gray-300 cursor-not-allowed' 
                        : downloadStatus.csv === 'success'
                        ? 'bg-green-50 border-green-300'
                        : downloadStatus.csv === 'error'
                        ? 'bg-red-50 border-red-300'
                        : 'bg-green-50 hover:bg-green-100 border-green-200 hover:border-green-300'
                    }`}
                  >
                    {/* Microsoft Excel Logo */}
                    <div className={`w-6 h-6 rounded flex items-center justify-center ${
                      downloadStatus.csv === 'downloading' ? 'bg-gray-400' :
                      downloadStatus.csv === 'success' ? 'bg-green-600' :
                      downloadStatus.csv === 'error' ? 'bg-red-600' :
                      'bg-green-600'
                    }`}>
                      {downloadStatus.csv === 'downloading' ? (
                        <svg className="w-4 h-4 text-white animate-spin" fill="none" viewBox="0 0 24 24">
                          <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                          <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                      ) : downloadStatus.csv === 'success' ? (
                        <svg className="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                        </svg>
                      ) : downloadStatus.csv === 'error' ? (
                        <svg className="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                        </svg>
                      ) : (
                        <svg className="w-4 h-4 text-white" viewBox="0 0 24 24" fill="currentColor">
                          <path d="M3 3h18v18H3V3zm3 3v12h12V6H6zm2 2h8v2H8V8zm0 3h8v2H8v-2zm0 3h8v2H8v-2z"/>
                        </svg>
                      )}
                    </div>
                    <span className={`font-semibold ${
                      downloadStatus.csv === 'downloading' ? 'text-gray-500' :
                      downloadStatus.csv === 'success' ? 'text-green-700' :
                      downloadStatus.csv === 'error' ? 'text-red-700' :
                      'text-green-700 group-hover:text-green-800'
                    }`}>
                      {downloadStatus.csv === 'downloading' ? 'Generating...' :
                       downloadStatus.csv === 'success' ? 'Downloaded!' :
                       downloadStatus.csv === 'error' ? 'Failed - Try Again' :
                       'Download as Excel'}
                    </span>
                  </button>
                </div>
                
                {/* Browser-specific help text */}
                {(() => {
                  const browser = getBrowserInfo();
                  if (browser.isFirefox) {
                    return (
                      <div className="mt-3 p-2 bg-yellow-50 border border-yellow-200 rounded-lg">
                        <div className="flex items-start space-x-2">
                          <svg className="w-4 h-4 text-yellow-600 mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" />
                          </svg>
                          <div className="text-xs text-yellow-800">
                            <strong>Firefox users:</strong> If download doesn't start automatically, right-click the button and select "Save link as..." or check your browser's download settings.
                          </div>
                        </div>
                      </div>
                    );
                  } else if (browser.isSafari) {
                    return (
                      <div className="mt-3 p-2 bg-blue-50 border border-blue-200 rounded-lg">
                        <div className="flex items-start space-x-2">
                          <svg className="w-4 h-4 text-blue-600 mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                          </svg>
                          <div className="text-xs text-blue-800">
                            <strong>Safari users:</strong> Downloads may open in a new tab. If the file doesn't download automatically, right-click the button and select "Download Linked File As...".
                          </div>
                        </div>
                      </div>
                    );
                  } else if (browser.isIE) {
                    return (
                      <div className="mt-3 p-2 bg-red-50 border border-red-200 rounded-lg">
                        <div className="flex items-start space-x-2">
                          <svg className="w-4 h-4 text-red-600 mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" />
                          </svg>
                          <div className="text-xs text-red-800">
                            <strong>Internet Explorer users:</strong> This browser has limited download support. Please use a modern browser like Chrome, Edge, or Firefox for the best experience.
                          </div>
                        </div>
                      </div>
                    );
                  } else if (!browser.supportsDownload) {
                    return (
                      <div className="mt-3 p-2 bg-orange-50 border border-orange-200 rounded-lg">
                        <div className="flex items-start space-x-2">
                          <svg className="w-4 h-4 text-orange-600 mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" />
                          </svg>
                          <div className="text-xs text-orange-800">
                            <strong>Limited download support:</strong> Your browser may not support automatic downloads. Try right-clicking the button and selecting "Save link as...".
                          </div>
                        </div>
                      </div>
                    );
                  }
                  return null;
                })()}
              </div>
            )}

            {/* Timestamp - ChatGPT Style */}
            <div className="mt-2 text-xs text-gray-500">
              {formatTime(timestamp)}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}