'use client';

import React from 'react';

interface MessageBubbleProps {
  message: string;
  isUser: boolean;
  timestamp: Date;
}

const downloadDocument = (content: string, filename: string, format: 'txt' | 'docx' | 'csv') => {
  // Clean up the content for better formatting
  let cleanContent = content;
  
  // Add proper document header
  const header = `DORF NELSON & ZAUDERER
Legal Document
Generated: ${new Date().toLocaleDateString()}
===============================================

`;
  
  // Add disclaimer footer
  const footer = `

===============================================
DISCLAIMER: This is a template document generated by the Dorf Nelson & Zauderer Legal Assistant. 
This document is for informational purposes only and does not constitute legal advice. 
Please consult with a qualified attorney before using this document.

Â© ${new Date().getFullYear()} Dorf Nelson & Zauderer`;

  cleanContent = header + cleanContent + footer;
  
  let blob: Blob;
  let mimeType: string;
  
  switch (format) {
    case 'csv':
      // Convert to CSV format (simple conversion)
      const csvContent = cleanContent.split('\n').map(line => `"${line.replace(/"/g, '""')}"`).join('\n');
      blob = new Blob([csvContent], { type: 'text/csv' });
      break;
    case 'docx':
      // For now, we'll use RTF format which Word can open
      const rtfContent = `{\\rtf1\\ansi\\deff0 {\\fonttbl {\\f0 Times New Roman;}} \\f0\\fs24 ${cleanContent.replace(/\n/g, '\\par ')}}`;
      blob = new Blob([rtfContent], { type: 'application/rtf' });
      break;
    default: // txt
      blob = new Blob([cleanContent], { type: 'text/plain' });
  }
  
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = filename;
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  URL.revokeObjectURL(url);
};

export default function MessageBubble({ message, isUser, timestamp }: MessageBubbleProps) {
  const formatTime = (date: Date) => {
    return date.toLocaleTimeString('en-US', { 
      hour: 'numeric', 
      minute: '2-digit',
      hour12: true 
    });
  };

  // Check if message contains document content that can be downloaded
  const isDocument = message.length > 500 && (
    message.includes('CONTRACT') || 
    message.includes('AGREEMENT') || 
    message.includes('TEMPLATE') || 
    message.includes('DOCUMENT') ||
    message.includes('WHEREAS') ||
    message.includes('THEREFORE') ||
    message.includes('PARTY') ||
    message.includes('[') || // Placeholder fields
    message.includes('LEGAL') ||
    message.includes('TERMS') ||
    message.includes('CONDITIONS') ||
    message.includes('CLAUSE') ||
    message.includes('SECTION') ||
    message.includes('ARTICLE')
  );

  const handleDownload = (format: 'txt' | 'docx' | 'csv') => {
    // Generate a descriptive filename based on content
    let docType = 'legal_document';
    
    if (message.includes('CONTRACT')) docType = 'contract';
    else if (message.includes('AGREEMENT')) docType = 'agreement';
    else if (message.includes('TEMPLATE')) docType = 'template';
    else if (message.includes('NDA') || message.includes('NON-DISCLOSURE')) docType = 'nda';
    else if (message.includes('EMPLOYMENT')) docType = 'employment_agreement';
    else if (message.includes('LEASE')) docType = 'lease_agreement';
    else if (message.includes('SERVICE')) docType = 'service_agreement';
    else if (message.includes('TERMS')) docType = 'terms_conditions';
    
    const timestamp = new Date().toISOString().slice(0, 10); // YYYY-MM-DD
    const filename = `${docType}_${timestamp}.${format}`;
    
    downloadDocument(message, filename, format);
  };

  return (
    <div className={`py-8 ${isUser ? 'bg-gradient-to-r from-gray-50 to-blue-50/30' : 'bg-white'} border-b border-gray-100/50`}>
      <div className="max-w-4xl mx-auto px-4">
        <div className="flex items-start space-x-4">
          {/* Enhanced Avatar */}
          <div className={`w-10 h-10 rounded-full flex items-center justify-center flex-shrink-0 shadow-sm border-2 ${
            isUser 
              ? 'bg-gradient-to-br from-law-blue to-law-blue-dark text-white border-law-blue/20' 
              : 'bg-gradient-to-br from-gray-100 to-gray-200 text-gray-600 border-gray-200'
          }`}>
            {isUser ? (
              <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                <path fillRule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clipRule="evenodd" />
              </svg>
            ) : (
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253" />
              </svg>
            )}
          </div>
          
          {/* Message content - ChatGPT Style */}
          <div className="flex-1 min-w-0">
            <div className="prose prose-sm max-w-none">
              <p className="text-gray-900 leading-relaxed whitespace-pre-wrap m-0">{message}</p>
            </div>
            
            {/* Professional Download buttons */}
            {!isUser && isDocument && (
              <div className="mt-6 p-4 bg-gradient-to-r from-gray-50 to-blue-50/50 rounded-xl border border-gray-200">
                <div className="flex items-center mb-3">
                  <svg className="w-4 h-4 text-law-blue mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                  </svg>
                  <span className="text-sm font-semibold text-gray-800">Download Document</span>
                </div>
                <div className="flex flex-wrap gap-2">
                  <button
                    onClick={() => handleDownload('txt')}
                    className="flex items-center space-x-2 px-4 py-2 bg-white hover:bg-gray-50 rounded-lg transition-all duration-200 text-sm border border-gray-200 hover:border-gray-300 shadow-sm hover:shadow"
                  >
                    <svg className="w-4 h-4 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                    </svg>
                    <span className="font-medium">TXT</span>
                  </button>
                  <button
                    onClick={() => handleDownload('docx')}
                    className="flex items-center space-x-2 px-4 py-2 bg-blue-50 hover:bg-blue-100 rounded-lg transition-all duration-200 text-sm border border-blue-200 hover:border-blue-300 shadow-sm hover:shadow"
                  >
                    <svg className="w-4 h-4 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                    </svg>
                    <span className="font-medium text-blue-700">Word</span>
                  </button>
                  <button
                    onClick={() => handleDownload('csv')}
                    className="flex items-center space-x-2 px-4 py-2 bg-green-50 hover:bg-green-100 rounded-lg transition-all duration-200 text-sm border border-green-200 hover:border-green-300 shadow-sm hover:shadow"
                  >
                    <svg className="w-4 h-4 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 10h18M3 14h18m-9-4v8m-7 0h14a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />
                    </svg>
                    <span className="font-medium text-green-700">CSV</span>
                  </button>
                </div>
              </div>
            )}

            {/* Timestamp - ChatGPT Style */}
            <div className="mt-2 text-xs text-gray-500">
              {formatTime(timestamp)}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}